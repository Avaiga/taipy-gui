{
  "controls": [
    [
      "text",
      {
        "inherits": [
          "shared"
        ],
        "properties": [
          {
            "name": "value",
            "default_property": true,
            "type": "dynamic(Any)",
            "default_value": "\"\"",
            "doc": "The value displayed as text by this control."
          },
          {
            "name": "raw",
            "type": "bool",
            "default_value": "False",
            "doc": "If set to True, the component renders as an HTML &lt;span&gt; element without any default style."
          },
          {
            "name": "format",
            "type": "str",
            "doc": "The format to apply to the value.\nSee below."
          }
        ]
      }
    ],
    [
      "button",
      {
        "inherits": [
          "active",
          "shared"
        ],
        "properties": [
          {
            "name": "label",
            "default_property": true,
            "type": "dynamic(str|Icon)",
            "default_value": "\"\"",
            "doc": "The label displayed in the button."
          },
          {
            "name": "on_action",
            "type": "Callback",
            "doc": "The name of a function that is triggered when the button is pressed.\nThe parameters of that function are all optional:\n<ul>\n<li>state (<code>State^</code>): the state instance.</li>\n<li>id (optional[str]): the identifier of the button.</li>\n<li>action (optional[str]): the name of the action that provoked the change.</li>\n</ul>",
            "signature": [["state", "State"], ["id", "str"], ["action", "str"], ["payload", "dict"]]
          }
        ]
      }
    ],
    [
      "input",
      {
        "inherits": [
          "sharedInput",
          "on_change",
          "propagate"
        ],
        "properties": [
          {
            "name": "value",
            "default_property": true,
            "type": "dynamic(Any)",
            "default_value": "None",
            "doc": "The value represented by this control."
          },
          {
            "name": "password",
            "type": "bool",
            "default_value": "False",
            "doc": "If True, the text is obscured: all input characters are displayed as an asterisk ('*')."
          },
          {
            "name": "label",
            "type": "str",
            "default_value": "None",
            "doc": "The label associated with the input."
          },
          {
            "name": "multiline",
            "type": "bool",
            "default_value": "False",
            "doc": "If True, the text is presented as a multi line input."
          },
          {
            "name": "lines_shown",
            "type": "int",
            "default_value": "5",
            "doc": "The height of the displayed element if multiline is True."
          }
        ]
      }
    ],
    [
      "number",
      {
        "inherits": [
          "sharedInput",
          "on_change",
          "propagate"
        ],
        "properties": [
          {
            "name": "value",
            "default_property": true,
            "type": "dynamic(Any)",
            "doc": "The numerical value represented by this control."
          },
          {
            "name": "label",
            "type": "str",
            "default_value": "None",
            "doc": "The label associated with the input."
          }
        ]
      }
    ],
    [
      "slider",
      {
        "inherits": [
          "lovComp",
          "propagate"
        ],
        "properties": [
          {
            "name": "value",
            "default_property": true,
            "type": "dynamic(int | float | str)",
            "doc": "The value that is set for this slider.\nIt would be a <i>lov</i> label if it is used."
          },
          {
            "name": "min",
            "type": "int | float",
            "default_value": "0",
            "doc": "The minimum value.\nThis is ignored when <i>lov</i> is defined."
          },
          {
            "name": "max",
            "type": "int | float",
            "default_value": "100",
            "doc": "The maximum value.\nThis is ignored when <i>lov</i> is defined."
          },
          {
            "name": "text_anchor",
            "type": "str",
            "default_value": "\"bottom\"",
            "doc": "When the <i>lov</i> property is used, this property indicates the location of the label.\nPossible values are:\n<ul>\n<li>\"bottom\"</li>\n<li>\"top\"</li>\n<li>\"left\"</li>\n<li>\"right\"</li>\n<li>\"none\" (no label is displayed)</li>\n</ul>"
          },
          {
            "name": "labels",
            "type": "bool|dict",
            "doc": "The labels for specific points of the slider.\nIf set to True, this slider uses the labels of the <i>lov</i> if there are any.\nIf set to a dictionary, the slider uses the dictionary keys as a <i>lov</i> key or index, and the associated value as the label."
          },
          {
            "name": "continuous",
            "type": "bool",
            "default_value": "True",
            "doc": "If set to False, the control emits an on_change notification only when the mouse button is released, \notherwise notifications are emitted during the cursor movements. \nIf <i>lov</i> is defined, the default value is False."
          },
          {
            "name": "change_delay",
            "type": "int",
            "default_value": "<i>App config</i>",
            "doc": "Minimum time between triggering two <i>on_change</i> calls.\nThe default value is defined at the application configuration level by the <strong>change_delay</strong> configuration option. if None or 0, there's no delay."
          },
          {
            "name": "width",
            "type": "str",
            "default_value": "\"300px\"",
            "doc": "The width, in CSS units, of this element."
          },
          {
            "name": "height",
            "type": "str",
            "doc": "The height, in CSS units, of this element.\nIt defaults to the <i>width</i> value when using the vertical orientation."
          },
          {
            "name": "orientation",
            "type": "str",
            "default_value": "\"horizontal\"",
            "doc": "The orientation of this slider.\nValid values are \"horizontal\" or \"vertical\"."
          }
        ]
      }
    ],
    [
      "toggle",
      {
        "inherits": [
          "lovComp",
          "propagate"
        ],
        "properties": [
          {
            "name": "value"
          },
          {
            "name": "theme",
            "type": "bool",
            "default_value": "False",
            "doc": "If set, this toggle control acts as a way to set the application Theme (dark or light)."
          },
          {
            "name": "allow_unselect",
            "type": "bool",
            "default_value": "False",
            "doc": "If set, this allows de-selection and the value is set to unselected_value."
          }
        ]
      }
    ],
    [
      "date",
      {
        "inherits": [
          "on_change",
          "propagate"
        ],
        "properties": [
          {
            "name": "date",
            "default_property": true,
            "type": "dynamic(datetime)",
            "doc": "The date that this control represents and can modify.\nIt is typically bound to a <code>datetime</code> object."
          },
          {
            "name": "with_time",
            "type": "bool",
            "default_value": "False",
            "doc": "Whether or not to show the time part of the date."
          },
          {
            "name": "format",
            "type": "str",
            "doc": "The format to apply to the value.\nSee below."
          },
          {
            "name": "editable",
            "type": "dynamic(bool)",
            "default_value": "True",
            "doc": "Shows the date as a formatted string if not editable."
          }
        ]
      }
    ],
    [
      "chart",
      {
        "inherits": [
          "on_change",
          "propagate"
        ],
        "properties": [
          {
            "name": "data",
            "default_property": true,
            "required": true,
            "type": "dynamic(Any)",
            "doc": "The data object bound to this chart control.<br/>See the section on the <a href=\"#the-data-property\"><i>data</i> property</a> below for details."
          },
          {
            "name": "type",
            "type": "indexed(str)",
            "default_value": "scatter",
            "doc": "Chart type.\nSee the Plotly <a href=\"https://plotly.com/javascript/reference/\">chart type</a> documentation for details."
          },
          {
            "name": "mode",
            "type": "indexed(str)",
            "default_value": "lines+markers",
            "doc": "Chart mode.\nSee the Plotly <a href=\"https://plotly.com/javascript/reference/scatter/#scatter-mode\">chart mode</a> documentation for details."
          },
          {
            "name": "x",
            "type": "indexed(str)",
            "doc": "Column name for the <i>x</i> axis."
          },
          {
            "name": "y",
            "type": "indexed(str)",
            "doc": "Column name for the <i>y</i> axis."
          },
          {
            "name": "z",
            "type": "indexed(str)",
            "doc": "Column name for the <i>z</i> axis."
          },
          {
            "name": "lon",
            "type": "indexed(str)",
            "doc": "Column name for the <i>longitude</i> value. Cf. [Plotly Map Traces](https://plotly.com/javascript/reference/scattergeo/#scattergeo-lon)."
          },
          {
            "name": "lat",
            "type": "indexed(str)",
            "doc": "Column name for the <i>latitude</i> value. Cf. [Plotly Map Traces](https://plotly.com/javascript/reference/scattergeo/#scattergeo-lat)."
          },
          {
            "name": "r",
            "type": "indexed(str)",
            "doc": "Column name for the <i>r</i> value. Cf. [Ploty Polar Charts](https://plotly.com/javascript/polar-chart/)."
          },
          {
            "name": "theta",
            "type": "indexed(str)",
            "doc": "Column name for the <i>theta</i> value. Cf. [Ploty Polar Charts](https://plotly.com/javascript/polar-chart/)."
          },
          {
            "name": "high",
            "type": "indexed(str)",
            "doc": "Column name for the <i>high</i> value. Cf. [Ploty Candlestick](https://plotly.com/javascript/reference/candlestick/#candlestick-high)."
          },
          {
            "name": "low",
            "type": "indexed(str)",
            "doc": "Column name for the <i>low</i> value. Cf. [Ploty Candlestick](https://plotly.com/javascript/reference/candlestick/#candlestick-low)."
          },
          {
            "name": "open",
            "type": "indexed(str)",
            "doc": "Column name for the <i>open</i> value. Cf. [Ploty Candlestick](https://plotly.com/javascript/reference/candlestick/#candlestick-open)."
          },
          {
            "name": "close",
            "type": "indexed(str)",
            "doc": "Column name for the <i>close</i> value. Cf. [Ploty Candlestick](https://plotly.com/javascript/reference/candlestick/#candlestick-close)."
          },
          {
            "name": "locations",
            "type": "indexed(str)",
            "doc": "Column name for the <i>locations</i> value. Cf. [Ploty Choropleth Map](https://plotly.com/javascript/choropleth-maps/)."
          },
          {
            "name": "values",
            "type": "indexed(str)",
            "doc": "Column name for the <i>values</i> value. Cf. [Ploty Pie](https://plotly.com/javascript/reference/pie/#pie-values) or [Ploty FunnelArea](https://plotly.com/javascript/reference/funnelarea/#funnelarea-values)."
          },
          {
            "name": "labels",
            "type": "indexed(str)",
            "doc": "Column name for the <i>labels</i> value. Cf. [Ploty Pie](https://plotly.com/javascript/reference/pie/#pie-labels)."
          },
          {
            "name": "text",
            "type": "indexed(str)",
            "doc": "Column name for the text associated to the point for the indicated trace.\nThis is meaningful only when _mode_ has the <i>text</i> option."
          },
          {
            "name": "base",
            "type": "indexed(str)",
            "doc": "Column name for the <i>base</i> value. Used in bar charts only.\nSee the Plotly <a href=\"https://plotly.com/javascript/reference/bar/#bar-base\">bar chart base</a> documentation for details.\""
          },
          {
            "name": "title",
            "type": "str",
            "doc": "The title of this chart control."
          },
          {
            "name": "render",
            "type": "dynamic(bool)",
            "default_value": "True",
            "doc": "If True, this chart is visible on the page."
          },
          {
            "name": "on_range_change",
            "type": "Callback",
            "doc": "Callback function called when the visible part of the x axis changes.\nThe function receives four parameters:\n<ul>\n<li>state (<code>State^</code>): the state instance.</li>\n<li>id (optional[str]): the identifier of the chart control.</li>\n<li>action (optional[str]): the name of the action that provoked the change.</li>\n<li>payload (dict[str, Any]): the full details on this callback's invocation, as emitted by <a href=\"https://plotly.com/javascript/plotlyjs-events/#update-data\">plotly</a>.</li>\n</ul>",
            "signature": [["state", "State"], ["id", "str"], ["action", "str"], ["payload", "dict"]]

          },
          {
            "name": "columns",
            "type": "str|List[str]|dict[str, dict[str, str]]",
            "default_value": "_All columns_",
            "doc": "List of column names\n<ul>\n<li>str: ;-separated list of column names</li>\n<li>List[str]: list of names</li>\n<li>dict: {\"col_name\": {format: \"format\", index: 1}} if index is specified, it represents the display order of the columns.\nIf not, the list order defines the index</li>\n</ul>"
          },
          {
            "name": "label",
            "type": "indexed(str)",
            "doc": "The label for the indicated trace.\nThis is used when the mouse hovers over a trace."
          },
          {
            "name": "name",
            "type": "indexed(str)",
            "doc": "The name of the indicated trace."
          },
          {
            "name": "selected",
            "type": "indexed(dynamic(list[int]|str))",
            "doc": "List of the selected point indices."
          },
          {
            "name": "color",
            "type": "indexed(str)",
            "doc": "The color of the indicated trace (or a column name for scattered)."
          },
          {
            "name": "selected_color",
            "type": "indexed(str)",
            "doc": "The color of the selected points for the indicated trace."
          },
          {
            "name": "marker",
            "type": "indexed(dict[str, Any])",
            "doc": "The type of markers used for the indicated trace.\nSee <a href=\"https://plotly.com/javascript/reference/scatter/#scatter-marker\">marker</a> for details.\nColor, opacity, size and symbol can be column name."
          },
          {
            "name": "line",
            "type": "indexed(str|dict[str, Any])",
            "doc": "The configuration of the line used for the indicated trace.\nSee <a href=\"https://plotly.com/javascript/reference/scatter/#scatter-line\">line</a> for details.\nIf the value is a string, it must be a dash type or pattern (see <a href=\"https://plotly.com/python/reference/scatter/#scatter-line-dash\">dash style of lines</a> for details)."
          },
          {
            "name": "selected_marker",
            "type": "indexed(dict[str, Any])",
            "doc": "The type of markers used for selected points in the indicated trace.\nSee <a href=\"https://plotly.com/javascript/reference/scatter/#scatter-selected-marker\">selected marker for details."
          },
          {
            "name": "layout",
            "type": "dict[str, Any]",
            "doc": "The <i>plotly.js</i> compatible <a href=\"https://plotly.com/javascript/reference/layout/\">layout object</a>."
          },
          {
            "name": "plot_config",
            "type": "dict[str, Any]",
            "doc": "The <i>plotly.js</i> compatible <a href=\"https://plotly.com/javascript/configuration-options/\"> configuration options object</a>."
          },
          {
            "name": "options",
            "type": "indexed(dict[str, Any])",
            "doc": "The <i>plotly.js</i> compatible <a href=\"https://plotly.com/javascript/reference/\">data object where dynamic data will be overridden.</a>."
          },
          {
            "name": "orientation",
            "type": "indexed(str)",
            "doc": "The orientation of the indicated trace."
          },
          {
            "name": "text_anchor",
            "type": "indexed(str)",
            "doc": "Position of the text relative to the point.\nValid values are: <i>top</i>, <i>bottom</i>, <i>left</i>, and <i>right</i>."
          },
          {
            "name": "xaxis",
            "type": "indexed(str)",
            "doc": "The <i>x</i> axis identifier for the indicated trace."
          },
          {
            "name": "yaxis",
            "type": "indexed(str)",
            "doc": "The <i>y</i> axis identifier for the indicated trace."
          },
          {
            "name": "width",
            "type": "str|int|float",
            "default_value": "100%",
            "doc": "The width, in CSS units, of this element."
          },
          {
            "name": "height",
            "type": "str|int|float",
            "doc": "The height, in CSS units, of this element."
          },
          {
            "name": "template",
            "type": "dict",
            "doc": "The plotly layout [template](https://plotly.com/javascript/layout-template/)."
          },
          {
            "name": "template[dark]",
            "type": "dict",
            "doc": "The plotly layout template applied over the base template when theme is dark."
          },
          {
            "name": "template[light]",
            "type": "dict",
            "doc": "The plotly layout template applied over the base template when theme is not dark."
          },
          {
            "name": "decimator",
            "type": "indexed(taipy.gui.data.Decimator)",
            "doc": "A decimator instance for the indicated trace that will reduce the size of the data being sent back and forth.<br>If defined as indexed, it will impact only the indicated trace; if not, it will apply only the the first trace."
          }
        ]
      }
    ],
    [
      "file_download",
      {
        "inherits": [
          "active",
          "shared"
        ],
        "properties": [
          {
            "name": "content",
            "default_property": true,
            "type": "dynamic(url | path | file | ReadableBuffer)",
            "doc": "The content of the file.\n\n<p>\nIf a buffer is provided (string, array of bytes...), and in order to prevent the bandwidth to be\nconsumed too much, the way the data is transferred depends on the the <i>data_url_max_size</i>\nparameter of the application configuration (which is set to 50kB by default):\n<ul>\n<li>If the size of the buffer is smaller than this setting, then the raw content is generated as a\n  data URL, encoded using base64 (i.e. <code>\"data:&lt;mimetype&gt;;base64,&lt;data&gt;\"</code>).</li>\n<li>If the size of the buffer is greater than this setting, then it is transferred through a temporary\n  file.</li>\n</ul>\n</p>"
          },
          {
            "name": "label",
            "type": "dynamic(str)",
            "doc": "The label of the button."
          },
          {
            "name": "on_action",
            "type": "Callback",
            "doc": "The name of a function that is triggered when the download is initiated.\nAll the parameters of that function are optional:\n<ul>\n<li>state (<code>State^</code>): the state instance.</li>\n<li>id (optional[str]): the identifier of the button.</li>\n<li>action (optional[str]): the name of the action that provoked the change.</li>\n</ul>",
            "signature": [["state", "State"], ["id", "str"], ["action", "str"]]
          },
          {
            "name": "auto",
            "type": "bool",
            "default_value": "False",
            "doc": "If True, the download starts as soon as the page is loaded."
          },
          {
            "name": "render",
            "type": "dynamic(bool)",
            "default_value": "True",
            "doc": "If True, the control is displayed.\nIf False, the control is not displayed."
          },
          {
            "name": "bypass_preview",
            "type": "bool",
            "default_value": "True",
            "doc": "If False, allows the browser to try to show the content in a different tab.\nThe file download is always performed."
          },
          {
            "name": "name",
            "type": "str",
            "doc": "A name proposition for the file to save, that the user can change."
          }
        ]
      }
    ],
    [
      "file_selector",
      {
        "inherits": [
          "active",
          "shared"
        ],
        "properties": [
          {
            "name": "content",
            "default_property": true,
            "type": "dynamic(str)",
            "doc": "The path or the list of paths of the uploaded files."
          },
          {
            "name": "label",
            "type": "str",
            "doc": "The label of the button."
          },
          {
            "name": "on_action",
            "type": "Callback",
            "doc": "The name of the function that will be triggered.\nAll the parameters of that function are optional:\n<ul>\n<li>state (<code>State^</code>): the state instance.</li>\n<li>id (optional[str]): the identifier of the button.</li>\n<li>action (optional[str]): the name of the action that provoked the change.</li>\n</ul>",
            "signature": [["state", "State"], ["id", "str"], ["action", "str"]]
          },
          {
            "name": "multiple",
            "type": "bool",
            "default_value": "False",
            "doc": "If set to True, multiple files can be uploaded."
          },
          {
            "name": "extensions",
            "type": "str",
            "default_value": "\".csv,.xlsx\"",
            "doc": "The list of file extensions that can be uploaded."
          },
          {
            "name": "drop_message",
            "type": "str",
            "default_value": "\"Drop here to Upload\"",
            "doc": "The message that is displayed when the user drags a file above the button."
          }
        ]
      }
    ],
    [
      "image",
      {
        "inherits": [
          "active",
          "shared"
        ],
        "properties": [
          {
            "name": "content",
            "default_property": true,
            "type": "dynamic(url | path | file | ReadableBuffer)",
            "doc": "The image source.\n\n<p>\nIf a buffer is provided (string, array of bytes...), and in order to prevent the bandwidth to be\nconsumed too much, the way the image data is transferred depends on the the <i>data_url_max_size</i>\nparameter of the application configuration (which is set to 50kB by default):\n<ul>\n<li>If the size of the buffer is smaller than this setting, then the raw content is generated as a\n  data URL, encoded using base64 (i.e. <code>\"data:&lt;mimetype&gt;;base64,&lt;data&gt;\"</code>).</li>\n<li>If the size of the buffer is greater than this setting, then it is transferred through a temporary\n  file.</li>\n</ul>\n</p>"
          },
          {
            "name": "label",
            "type": "dynamic(str)",
            "doc": "The label for this image."
          },
          {
            "name": "on_action",
            "type": "str",
            "doc": "The name of a function that is triggered when the user clicks on the image.\nAll the parameters of that function are optional:\n<ul>\n<li>state (<code>State^</code>): the state instance.</li>\n<li>id (optional[str]): the identifier of the button.</li>\n<li>action (optional[str]): the name of the action that provoked the change.</li>\n</ul>",
            "signature": [["state", "State"], ["id", "str"], ["action", "str"], ["payload", "dict"]]
          },
          {
            "name": "width",
            "type": "str|int|float",
            "default_value": "\"300px\"",
            "doc": "The width, in CSS units, of this element."
          },
          {
            "name": "height",
            "type": "str|int|float",
            "doc": "The height, in CSS units, of this element."
          }
        ]
      }
    ],
    [
      "indicator",
      {
        "inherits": [
          "shared"
        ],
        "properties": [
          {
            "name": "display",
            "default_property": true,
            "type": "dynamic(Any)",
            "doc": "The label to be displayed.\nThis can be formatted if it is a numerical value."
          },
          {
            "name": "value",
            "type": "dynamic(int,float)",
            "default_value": "<i>min</i>",
            "doc": "The location of the label on the [<i>min</i>, <i>max</i>] range."
          },
          {
            "name": "min",
            "type": "int|float",
            "default_value": "0",
            "doc": "The minimum value of the range."
          },
          {
            "name": "max",
            "type": "int|float",
            "default_value": "100",
            "doc": "The maximum value of the range."
          },
          {
            "name": "format",
            "type": "str",
            "doc": "The format to use when displaying the value.\nThis uses the <code>printf</code> syntax."
          },
          {
            "name": "orientation",
            "type": "str",
            "default_value": "\"horizontal\"",
            "doc": "The orientation of this slider."
          },
          {
            "name": "width",
            "type": "str",
            "default_value": "None",
            "doc": "The width, in CSS units, of the indicator (used when orientation is horizontal)."
          },
          {
            "name": "height",
            "type": "str",
            "default_value": "None",
            "doc": "The height, in CSS units, of the indicator (used when orientation is vartical)."
          }
        ]
      }
    ],
    [
      "menu",
      {
        "inherits": [
          "active"
        ],
        "properties": [
          {
            "name": "lov",
            "default_property": true,
            "type": "dynamic(str|List[str|Icon|Any])",
            "doc": "The list of menu option values."
          },
          {
            "name": "adapter",
            "type": "Function",
            "default_value": "`\"lambda x: str(x)\"`",
            "doc": "The function that transforms an element of <i>lov</i> into a <i>tuple(id:str, label:str|Icon)</i>."
          },
          {
            "name": "type",
            "type": "str",
            "default_value": "<i>Type of the first lov element</i>",
            "doc": "Must be specified if <i>lov</i> contains a non specific type of data (ex: dict).\n<i>value</i> must be of that type, <i>lov</i> must be an iterable on this type, and the adapter function will receive an object of this type."
          },
          {
            "name": "label",
            "type": "str",
            "doc": "The title of the menu."
          },
          {
            "name": "width",
            "type": "str",
            "default_value": "\"15vw\"",
            "doc": "The width, in CSS units, of the menu when unfolded.\nNote that when running on a mobile device, the property <i>width[active]</i> is used instead."
          },
          {
            "name": "width[mobile]",
            "type": "str",
            "default_value": "\"85vw\"",
            "doc": "The width, in CSS units, of the menu when unfolded, on a mobile device."
          },
          {
            "name": "on_action",
            "type": "Callback",
            "doc": "The name of the function that will be triggered when a menu option is selected.<br/>\nAll the parameters of that function are optional:\n<ul>\n<li>state (<code>State^</code>): the state instance.</li>\n<li>id (str): the identifier of the button.</li>\n<li>action (str): the name of the action that provoked the change.</li>\n<li>payload (dict): the details on this callback's invocation.<br/>\nThis dictionary has the following keys:\n<ul>\n<li>args: List where the first element contains the id of the selected option.</li>\n</ul>\n</li>\n</ul>",
            "signature": [["state", "State"], ["id", "str"], ["action", "str"], ["payload", "dict"]]
          }
        ]
      }
    ],
    [
      "navbar",
      {
        "inherits": [
            "active",
            "shared"
          ],
          "properties": [
            {
                "name": "lov",
                "type": "dict[str, Any]",
                "doc": "The list of pages. The keys should be page id and start with \"/\", the values are labels. See the <a href=\"../../binding/#list-of-values\">section on List of Values</a> for details."
            }
        ]
      }
    ],
    [
      "selector",
      {
        "inherits": [
          "lovComp",
          "propagate"
        ],
        "properties": [
          {
            "name": "filter",
            "type": "bool",
            "default_value": "False",
            "doc": "If True, this control is combined with a filter input area."
          },
          {
            "name": "multiple",
            "type": "bool",
            "default_value": "False",
            "doc": "If True, the user can select multiple items."
          },
          {
            "name": "width",
            "type": "str|int",
            "default_value": "\"360px\"",
            "doc": "The width, in CSS units, of this element."
          },
          {
            "name": "height",
            "type": "str|int",
            "doc": "The height, in CSS units, of this element."
          },
          {
            "name": "dropdown",
            "type": "bool",
            "default_value": "False",
            "doc": "If True, the list of items is shown in a dropdown menu.<br/>\nYou cannot use the filter in that situation."
          },
          {
            "name": "label",
            "type": "str",
            "default_value": "None",
            "doc": "The label associated with the selector when in dropdown mode."
          }
        ]
      }
    ],
    [
      "status",
      {
        "inherits": [
          "shared"
        ],
        "properties": [
          {
            "name": "value",
            "default_property": true,
            "type": "dict|list[dict]|tuple|list[tuple]",
            "doc": "The different statuses to represent. See below."
          },
          {
            "name": "without_close",
            "type": "bool",
            "default_value": "False",
            "doc": "If True, the user cannot hide the child statuses."
          }
        ]
      }
    ],
    [
      "table",
      {
        "inherits": [
          "active",
          "shared"
        ],
        "properties": [
          {
            "name": "data",
            "default_property": true,
            "required": true,
            "type": "Any",
            "doc": "The data to be represented in this table."
          },
          {
            "name": "page_size",
            "type": "int",
            "default_value": "100",
            "doc": "For paginated table, the number of rows displayed."
          },
          {
            "name": "allow_all_rows",
            "type": "bool",
            "default_value": "False",
            "doc": "For paginated table, adds an option to show all rows."
          },
          {
            "name": "show_all",
            "type": "bool",
            "default_value": "False",
            "doc": "For paginated table, show all rows."
          },
          {
            "name": "auto_loading",
            "type": "bool",
            "default_value": "False",
            "doc": "data will be loaded on demand."
          },
          {
            "name": "width[<i>col_name</i>]",
            "type": "str",
            "doc": "The width, in CSS units, of the indicated column."
          },
          {
            "name": "selected",
            "type": "list[int]|str",
            "doc": "The list of the indices of the rows to show as selected."
          },
          {
            "name": "page_size_options",
            "type": "List[int]|str",
            "default_value": "[50, 100, 500]",
            "doc": "The list of available page sizes that users can choose."
          },
          {
            "name": "columns",
            "type": "str|List[str]|Dict[str, Dict[str, str|int]]",
            "default_value": "<i>shows all columns when empty</i>",
            "doc": "The list of the column names to display.\n<ul>\n<li>str: Semicolon (';')-separated list of column names.</li>\n<li>List[str]: list of column names</li>\n<li>dict: a dictionary with entries matching: {\"col name\": {format: \"format\", index: 1}}.<br/>\nif <i>index</i> is specified, it represents the display order of the columns.\nIf <i>index</i> is not specified, the list order defines the index.<br/>\nIf <i>format</i> is specified, it is used for numbers or dates.</li>\n</ul>"
          },
          {
            "name": "date_format",
            "type": "str",
            "default_value": "\"MM/dd/yyyy\"",
            "doc": "The date format that is used for all date columns when format is not specifically defined."
          },
          {
            "name": "number_format",
            "type": "str",
            "doc": "The number format that is used for all number columns when format is not specifically defined."
          },
          {
            "name": "group_by[<i>col_name</i>]",
            "type": "bool",
            "default_value": "False",
            "doc": "Indicates, if True, that the given column can be aggregated.\nSee <a href=\"#aggregation\">below</a> for details."
          },
          {
            "name": "apply[<i>col_name</i>]",
            "type": "str",
            "default_value": "\"first\"",
            "doc": "The name of the aggregation function to use.\nThis is used only if <i>group_by[column_name]</i> is set to True.\nSee <a href=\"#aggregation\">below</a> for details.\n"
          },
          {
            "name": "style",
            "type": "str",
            "doc": "Allows the styling of table lines.\nSee <a href=\"#styling\">below</a> for details."
          },
          {
            "name": "style[<i>col_name</i>]",
            "type": "str",
            "doc": "Allows the styling of table cells.\nSee <a href=\"#styling\">below</a> for details."
          },
          {
            "name": "tooltip",
            "type": "str",
            "doc": "The name of the function that must return a tooltip text for a cell.\nSee <a href=\"#cell%20tooltip\">below</a> for details."
          },
          {
            "name": "tooltip[<i>col_name</i>]",
            "type": "str",
            "doc": "The name of the function that must return a tooltip text for a cell.\nSee <a href=\"#cell%20tooltip\">below</a> for details."
          },
          {
            "name": "width",
            "type": "str|int|float",
            "default_value": "\"100vw\"",
            "doc": "The width, in CSS units, of this table control."
          },
          {
            "name": "height",
            "type": "str|int|float",
            "default_value": "\"80vh\"",
            "doc": "The height, in CSS units, of this table control."
          },
          {
            "name": "filter",
            "type": "bool",
            "default_value": "False",
            "doc": "Indicates, if True, that all columns can be filtered."
          },
          {
            "name": "filter[<i>col_name</i>]",
            "type": "bool",
            "default_value": "False",
            "doc": "Indicates, if True, that the indicated column can be filtered."
          },
          {
            "name": "nan_value",
            "type": "str",
            "default_value": "\"\"",
            "doc": "The replacement text for NaN (not-a-number) values."
          },
          {
            "name": "nan_value[<i>col_name</i>]",
            "type": "str",
            "default_value": "\"\"",
            "doc": "The replacement text for NaN (not-a-number) values for the indicated column."
          },
          {
            "name": "editable",
            "type": "dynamic(bool)",
            "default_value": "True",
            "doc": "Indicates, if True, that all columns can be edited."
          },
          {
            "name": "editable[<i>col_name</i>]",
            "type": "bool",
            "default_value": "editable",
            "doc": "Indicates, if False, that the indicated column cannot be edited when editable is True."
          },
          {
            "name": "on_edit",
            "type": "Callback",
            "doc": "The name of a function that is to be triggered when a cell edition is validated.<br/>\nAll parameters of that function are optional:\n<ul>\n<li>state (<code>State^</code>): the state instance.</li>\n<li>var_name (str): the name of the tabular data variable.</li>\n<li>action (str): the name of the action that provoked the change.</li>\n<li>payload (dict): the details on this callback's invocation.<br/>\nThis dictionary has the following keys:\n<ul>\n<li>index (int): the row index.</li>\n<li>col (str): the column name.</li>\n<li>value (Any): the new cell value cast to the type of the column.</li>\n<li>user_value (str): the new cell value as entered by the user.</li>\n</ul>\n</li>\n</ul>\nIf this property is not set, the user cannot edit cells.",
            "signature": [["state", "State"], ["var_name", "str"], ["action", "str"], ["payload", "dict"]]
          },
          {
            "name": "on_delete",
            "type": "str",
            "doc": "The name of a function that is to be triggered when a row is deleted.<br/>\nAll parameters of that function are optional:\n<ul>\n<li>state (<code>State^</code>): the state instance.</li>\n<li>var_name (str): the name of the tabular data variable.</li>\n<li>action (str): the name of the action that provoked the change.</li>\n<li>payload (dict): the details on this callback's invocation.<br/>\nThis dictionary has the following keys:\n<ul>\n<li>index (int): the row index.</li>\n</ul>\n</li>\n</ul>\nIf this property is not set, the user cannot delete rows.",
            "signature": [["state", "State"], ["var_name", "str"], ["action", "str"], ["payload", "dict"]]
          },
          {
            "name": "on_add",
            "type": "str",
            "doc": "The name of a function that is to be triggered when the user requests a row to be added.<br/>\nAll parameters of that function are optional:\n<ul>\n<li>state (<code>State^</code>): the state instance.</li>\n<li>var_name (str): the name of the tabular data variable.</li>\n<li>action (str): the name of the action that provoked the change.</li>\n<li>payload (dict): the details on this callback's invocation.<br/>\nThis dictionary has the following keys:\n<ul>\n<li>index (int): the row index.</li>\n</ul>\n</li>\n</ul>\nIf this property is not set, the user cannot add rows.",
            "signature": [["state", "State"], ["var_name", "str"], ["action", "str"], ["payload", "dict"]]
          },
          {
            "name": "on_action",
            "type": "str",
            "doc": "The name of a function that is to be triggered when the user selects a row.<br/>\nAll parameters of that function are optional:\n<ul>\n<li>state (<code>State^</code>): the state instance.</li>\n<li>var_name (str): the name of the tabular data variable.</li>\n<li>action (str): the name of the action that provoked the change.</li>\n<li>payload (dict): the details on this callback's invocation.<br/>\nThis dictionary has the following keys:\n<ul>\n<li>index (int): the row index.</li></ul></li></ul>.",
            "signature": [["state", "State"], ["var_name", "str"], ["action", "str"], ["payload", "dict"]]
          },
          {
            "name": "size",
            "type": "str",
            "default_value": "\"small\"",
            "doc": "The size of the rows, valid values are \"small\" and \"medium\"."
          }
        ]
      }
    ],
    [
      "dialog",
      {
        "inherits": [
          "partial",
          "active",
          "shared"
        ],
        "properties": [
          {
            "name": "open",
            "default_property": true,
            "type": "bool",
            "default_value": "False",
            "doc": "If True, the dialog is visible. If False, it is hidden."
          },
          {
            "name": "on_action",
            "type": "Callback",
            "doc": "Name of a function that is triggered when a button is pressed.<br/>\nThe parameters of that function are all optional:\n<ul>\n<li>state (<code>State^</code>): the state instance.</li>\n<li>id (str): the identifier of the dialog.</li>\n<li>action (str): the name of the action that provoked the change.</li>\n<li>payload (dict): the details on this callback's invocation.<br/>\nThis dictionary has the following keys:\n<ul>\n<li>args: a list where the first element contains the index of the selected label.</li>\n</ul>\n</li>\n</ul>\n",
            "signature": [["state", "State"], ["id", "str"], ["action", "str"], ["payload", "dict"]]
          },
          {
            "name": "close_label",
            "type": "str",
            "default_value": "\"Close\"",
            "doc": "The tooltip of the top-right close icon button. In the <strong>on_action</strong> function, args will hold -1."
          },
          {
            "name": "labels",
            "type": " str|list[str]",
            "doc": "A list of labels to show in a row of buttons at the bottom of the dialog. The index of the button in the list is reported as args in the <strong>on_action</strong> function (-1 for the close icon)."
          },
          {
            "name": "width",
            "type": "str|int|float",
            "doc": "The width, in CSS units, of this dialog.\n(CSS property)"
          },
          {
            "name": "height",
            "type": "str|int|float",
            "doc": "The height, in CSS units, of this dialog.\n(CSS property)"
          }
        ]
      }
    ],
    [
      "tree",
      {
        "inherits": [
          "selector"
        ],
        "properties": [
          {
            "name": "expanded",
            "type": "dynamic(bool|str[])",
            "default_value": "True",
            "doc": "if boolean value False: only one node can be expanded at one given level else it should be an array of the ids that need to be expanded"
          },
          {
            "name": "multiple",
            "type": "bool",
            "default_value": "False",
            "doc": "If True, the user can select multiple items by holding the Ctrl key while clicking on items."
          },
          {
            "name": "select_leafs_only",
            "type": "bool",
            "default_value": "False",
            "doc": "If True, the user can only select leaf nodes"
          },
          {
            "name": "row_height",
            "type": "str",
            "doc": "The height, in CSS units, of each row."
          }
        ]
      }
    ]
  ],
  "blocks": [
    [
      "part",
      {
        "inherits": [
          "partial",
          "shared"
        ],
        "properties": [
          {
            "name": "render",
            "default_property": true,
            "type": "dynamic(bool)",
            "default_value": "True",
            "doc": "If True, this part is visible on the page.<br/>\nIf False, the part is hidden and all its content is not displayed."
          }
        ]
      }
    ],
    [
      "expandable",
      {
        "inherits": [
          "partial",
          "shared"
        ],
        "properties": [
          {
            "name": "value",
            "default_property": true,
            "type": "dynamic(str)",
            "doc": "Title of this block element."
          },
          {
            "name": "expanded",
            "type": "dynamic(bool)",
            "default_value": "True",
            "doc": "If True, the block is expanded, and the content is displayed.<br/>\nIf False, the block is collapsed and its content is hidden."
          }
        ]
      }
    ],
    [
      "layout",
      {
        "inherits": [
          "shared"
        ],
        "properties": [
          {
            "name": "columns",
            "default_property": true,
            "type": "str",
            "default_value": "\"1 1\"",
            "doc": "The list of weights for each column.\nFor example, `\"1 2\"` creates a 2 column grid:\n<ul>\n<li>1fr</li>\n<li>2fr</li>\n</ul>\nThe creation of multiple same size columns can be simplified by using the multiply sign eg. \"5*1\" is equivalent to \"1 1 1 1 1\"."
          },
          {
            "name": "columns[mobile]",
            "type": "str",
            "default_value": "\"1\"",
            "doc": "The list of weights for each column, when displayed on a mobile device.\nThe syntax is the same as for <i>columns</i>."
          },
          {
            "name": "gap",
            "type": "str",
            "default_value": "\"0.5rem\"",
            "doc": "The size of the gap between the columns."
          }
        ]
      }
    ],
    [
      "pane",
      {
        "inherits": [
          "partial",
          "on_change",
          "active",
          "shared"
        ],
        "properties": [
          {
            "name": "open",
            "default_property": true,
            "type": "dynamic(bool)",
            "default_value": "False",
            "doc": "If True, this pane is visible on the page.\nIf False, the pane is hidden."
          },
          {
            "name": "on_close",
            "type": "Callback",
            "doc": "The name of a function that is be triggered when this pane is closed (if the user clicks outside of it or presses the Esc key).\nAll parameters of that function are optional:\n<ul>\n<li>state (<code>State^</code>): the state instance.</li>\n<li>id (optional[str]): the identifier of the button.</li>\n<li>action (optional[str]): the name of the action that provoked the change.</li>\n</ul>\nIf this property is not set, no function is called when this pane is closed.",
            "signature": [["state", "State"], ["id", "str"], ["action", "str"]]
          },
          {
            "name": "anchor",
            "type": "str",
            "default_value": "\"left\"",
            "doc": "Anchor side of the pane.\nValid values are \"left\", \"right\", \"top\", or \"bottom\"."
          },
          {
            "name": "width",
            "type": "str",
            "default_value": "\"30vw\"",
            "doc": "Width, in CSS units, of this pane.\nThis is used only if <i>anchor</i> is \"left\" or \"right\"."
          },
          {
            "name": "height",
            "type": "str",
            "default_value": "\"30vh\"",
            "doc": "Height, in CSS units, of this pane.\nThis is used only if <i>anchor</i> is \"top\" or \"bottom\"."
          },
          {
            "name": "persistent",
            "type": "bool",
            "default_value": "False",
            "doc": "If True, the pane appears next to the page.\nIf False, the pane covers the page where it appeared."
          }
        ]
      }
    ]
  ],
  "undocumented": [
    [
      "active",
      {
        "properties": [
          {
            "name": "active",
            "type": "dynamic(bool)",
            "default_value": "True",
            "doc": "Indicates if this component is active.\nAn inactive component allows no user interaction."
          }
        ]
      }
    ],
    [
      "lovComp",
      {
        "inherits": [
          "on_change"
        ],
        "properties": [
          {
            "name": "value",
            "default_property": true,
            "type": "dynamic(Any)",
            "doc": "Bound to the selection value."
          },
          {
            "name": "lov",
            "type": "dict[str, Any]",
            "doc": "The list of values. See the <a href=\"../../binding/#list-of-values\">section on List of Values</a> for details."
          },
          {
            "name": "adapter",
            "type": "Function",
            "default_value": "`lambda x: str(x)`",
            "doc": "The function that transforms an element of <i>lov</i> into a <i>tuple(id:str, label:str|Icon)</i>."
          },
          {
            "name": "type",
            "type": "str",
            "default_value": "<i>Type of first lov element</i>",
            "doc": "Must be specified if <i>lov</i> contains a non-specific type of data (ex: dict).\n<i>value</i> must be of that type, <i>lov</i> must be an iterable on this type, and the adapter function will receive an object of this type."
          },
          {
            "name": "value_by_id",
            "type": "bool",
            "default_value": "False",
            "doc": "If False, the selection value (in <i>value</i>) is the selected element in <i>lov</i>. If set to True, then <i>value</i> is set to the id of the selected element in <i>lov</i>."
          }
        ]
      }
    ],
    [
      "on_change",
      {
        "properties": [
          {
            "name": "on_change",
            "type": "Callback",
            "doc": "The name of a function that is triggered when the value is updated.<br/>\nThe parameters of that function are all optional:\n<ul>\n<li>state (<code>State^</code>): the state instance.</li>\n<li>var_name (str): the variable name.</li>\n<li>value (Any): the new value.</li>\n</ul>",
            "signature": [["state", "State"], ["var_name", "str"], ["value", ""]]
          }
        ]
      }
    ],
    [
      "partial",
      {
        "properties": [
          {
            "name": "partial",
            "type": "Partial",
            "doc": "A Partial object that holds the content of the dialog.\nThis should not be defined if <i>page</i> is set."
          },
          {
            "name": "page",
            "type": "str",
            "doc": "The page name to show as the content of the dialog.\nThis should not be defined if <i>partial</i> is set."
          }
        ]
      }
    ],
    [
      "propagate",
      {
        "inherits": [
          "active",
          "shared"
        ],
        "properties": [
          {
            "name": "propagate",
            "type": "bool",
            "default_value": "<i>App config</i>",
            "doc": "Allows the control's main value to be automatically propagated.<br/>\nThe default value is defined at the application configuration level.\nIf True, any change to the control's value is immediately reflected in the bound application variable."
          }
        ]
      }
    ],
    [
      "sharedInput",
      {
        "properties": [
          {
            "name": "change_delay",
            "type": "int",
            "default_value": "<i>App config</i>",
            "doc": "Minimum time between triggering two <i>on_change</i> calls.\nThe default value is defined at the application configuration level by the <strong>change_delay</strong> configuration option. if None, the delay is set to 300ms."
          },
          {
            "name": "on_action",
            "type": "Callback",
            "doc": "Name of a function that is triggered when a specific key is pressed.<br/>\nThe parameters of that function are all optional:\n<ul>\n<li>state (<code>State^</code>): the state instance.</li>\n<li>id (str): the identifier of the input.</li>\n<li>action (str): the name of the action that provoked the change.</li>\n<li>payload (dict): the details on this callback's invocation.<br/>\nThis dictionary has the following keys:\n<ul>\n<li>args (List):\n<ul><li>key name</li><li>variable name</li><li>current value</li></ul>\n</li>\n</ul>\n</li>\n</ul>\n",
            "signature": [["state", "State"], ["id", "str"], ["action", "str"], ["payload", "dict"]]
          },
          {
            "name": "action_keys",
            "type": "str",
            "default_value": "\"Enter\"",
            "doc": "Semicolon (';')-separated list of supported key names.\nAuthorized values are Enter, Escape, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12."
          }
        ]
      }
    ],
    [
      "shared",
      {
        "properties": [
          {
            "name": "id",
            "type": "str",
            "doc": "The identifier that will be assigned to the rendered HTML component."
          },
          {
            "name": "properties",
            "type": "dict[str, Any]",
            "doc": "Bound to a dictionary that contains additional properties for this element."
          },
          {
            "name": "class_name",
            "type": "dynamic(str)",
            "doc": "List of CSS class names that will be associated with the generated HTML Element.\nThis class names will be added to the default <code>taipy-&lt;element_type&gt;</code>."
          },
          {
            "name": "hover_text",
            "type": "dynamic(str)",
            "doc": "Information that is displayed when the user hovers over this element."
          }
        ]
      }
    ]
  ]
}
