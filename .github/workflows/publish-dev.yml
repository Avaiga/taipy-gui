name: Publish pre-release on Pypi

on:
  workflow_dispatch:
    inputs:
      version:
        description: "The Pypi dev package version to create (ex: 2.3.0.dev0)"
        required: true

jobs:
  verify-dev-package:
    timeout-minutes: 20
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: setup node version
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Extract Github Tag Version
        id: vars
        run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      - name: Ensure package version has 'dev' suffix
        run: |
          echo """
          import json, sys, os
          SUFFIX = 'dev'
          with open(f\"src{os.sep}taipy{os.sep}gui{os.sep}version.json\") as version_file:
              version_o = json.load(version_file)
          version = f'{version_o.get(\"major\")}.{version_o.get(\"minor\")}.{version_o.get(\"patch\")}'
          if vext := version_o.get(\"ext\"):
              version = f'{version}.{vext}'
          if SUFFIX not in version:
              raise ValueError(f\"version {version} does not contain suffix {SUFFIX}\")
          """ > /tmp/check1.py
          python /tmp/check1.py

      - name: Ensure package version is properly set
        run: |
          echo """
          import json, sys, os
          with open(f\"src{os.sep}taipy{os.sep}gui{os.sep}version.json\") as version_file:
            version_o = json.load(version_file)
          version = f'{version_o.get(\"major\")}.{version_o.get(\"minor\")}.{version_o.get(\"patch\")}'
          if vext := version_o.get(\"ext\"):
            version = f'{version}.{vext}'
          if version != sys.argv[1]:
            raise ValueError(f\"Invalid version {version} / {sys.argv[1]}\")
          if sys.argv[1] != sys.argv[2]:
            raise ValueError(f\"Invalid tag version {sys.argv[2]} with package version {sys.argv[1]}\")
          """ > /tmp/check2.py
          python /tmp/check2.py "${{ github.event.inputs.version }}" "${{ steps.vars.outputs.tag }}"

      - name: Download assets from github release tag
        run: |
          gh release download ${{ github.event.inputs.version }} --dir dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify there is a release asset
        run: |
          if [ ! -f dist/taipy-gui-${{ github.event.inputs.version }}.tar.gz ]; then
            echo "No release asset found"
            exit 1
          fi

  publish-pre-release-to-pypi:
    needs: [verify-dev-package]
    timeout-minutes: 20
    environment: publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download assets from tag
        run: |
          gh release download ${{ github.event.inputs.version }} --dir dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

  test-published-dev-package:
    needs: [publish-pre-release-to-pypi]
    timeout-minutes: 30
    strategy:
      matrix:
        python-versions: ['3.8','3.9','3.10', '3.11']
        os: [ubuntu-latest,windows-latest,macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-versions }}

      - name: Prepare tests on unix
        if: matrix.os != 'windows-latest'
        run: |
          rm -rf src

      - name: Prepare tests on windows
        if: matrix.os == 'windows-latest'
        run: |
          rmdir -Recurse -Force src

      - name: Prepare tests
        run: |
          pip install --upgrade pip
          pip install pytest pytest-mock playwright pytest-playwright pytest-timeout testbook
          pip install ipython ipykernel
          ipython kernel install --name "python3" --user
          playwright install chromium --with-deps

      - name: Install and test package
        run: |
          pip install --no-cache-dir ${{ github.event.repository.name }}==${{ github.event.inputs.version }}
          pytest
