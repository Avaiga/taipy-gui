name: Create Github Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "The release/package version to create (ex: 1.0.0)"
        required: true

jobs:
  test-package:
    timeout-minutes: 20
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      - name: Install npm
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Extract branch name
        shell: bash
        run: echo "BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Ensure package version is properly set
        run: |
          echo """
          import json, sys, os
          with open(f\"src{os.sep}taipy{os.sep}gui{os.sep}version.json\") as version_file:
              version_o = json.load(version_file)
          version = f'{version_o.get(\"major\")}.{version_o.get(\"minor\")}.{version_o.get(\"patch\")}'
          if vext := version_o.get(\"ext\"):
              version = f'{version}.{vext}'
          if version != sys.argv[1]:
              raise ValueError(f\"Invalid version {version} / {sys.argv[1]}\")
          """ > /tmp/check1.py
          python /tmp/check1.py "${{ github.event.inputs.version }}"

      - name: Validate branch name
        run: |
          echo """
          import json, sys, os
          with open(f\"src{os.sep}taipy{os.sep}gui{os.sep}version.json\") as version_file:
              version = json.load(version_file)
          if f'release/{version.get(\"major\")}.{version.get(\"minor\")}' != sys.argv[1]:
              raise ValueError(f'Branch name mismatch: release/{version.get(\"major\")}.{version.get(\"minor\")} != {sys.argv[1]}'')
          """ > /tmp/check.py
          python /tmp/check.py "${{ steps.extract_branch.outputs.BRANCH }}"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build and test the package
        run: |
          python setup.py build_py && python -m build
          rm -rf src
          pip install dist/*.tar.gz
          pip install pytest pytest-mock playwright pytest-playwright pytest-timeout testbook
          pip install ipython ipykernel
          ipython kernel install --name "python3" --user
          playwright install chromium --with-deps
          pytest

  release:
    needs: [test-package]
    timeout-minutes: 20
    name: Release package
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v3

      - name: Extract commit hash
        shell: bash
        run: echo "HASH=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        id: extract_hash

      - name: Create/update release and tag
        run: |
            gh release create ${{ github.event.inputs.version }} --target ${{ steps.extract_hash.outputs.HASH }} --notes "Release created using Github Workflows"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
